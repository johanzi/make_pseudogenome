# AUTHOR: Johan Zicola
# CREATION DATE: 2018-05-29
# CONTENT: commands to generated pseudogenomes from a VCF file

# Softwares used : 	bcftools v1.2
#			vcftools v0.1.14
#			local script filter_vcf2bed.py


# Note that no insertions are present in the VCF file generated by Andrea, using SHORE and GATK pipeline. 
# Therefore, insertions are not considered in the filter_vcf2bed.py.


###############################################################################
# Step 1: Generate a subset VCF file of your accessions of interest with indels
# This allows to process faster the downstream step as computational time increases with
# the size of the VCF file used.
# The vcf file should be compressed with bgzip and indexed with tabix.
# The samples_id.txt should contain the accessions ID (matching in VCF), one line per accession
# If needed to check samples ID, type "bcftools query -l <file.vcf.gz>
vcftools --keep <samples_id.txt> --gzvcf <file.vcf.gz> --recode --out subset_vcf_file

## gzip and create an index
bgzip subset_vcf_file.vcf
tabix subset_vcf_file.vcf.gz


###############################################################################
# Step 2: Generate a VCF subset of your accessions of interest without indels. This 
# allows to obtain a pseudogenome with the same size than the reference accessions.
# Note that if the difference in size of the chromosome is not an issue, this step can be skipped
vcftools --gzvcf <subset_vcf_file.gz> --remove-indels --recode --recode-INFO-all --out subset_vcf_file_wo_indels

## gzip and create an index
bgzip subset_vcf_file_wo_indels.vcf
tabix subset_vcf_file_wo_indels.vcf.gz

# If step 3  and 4 are to be skipped (see note in bottom of Step 4 section), one can directly 
# filter to keep only positions with a certain quality threshold. Indels should still be removed
# to avoid having differences in chromosome sizes between reference and pseudogenome
# For instance:
# GQ >= 30 and DP >= 5
# vcftools --gzvcf <subset_vcf_file.gz> --remove-indels --minGQ 30 --minDP 5  --recode --recode-INFO-all --out subset_vcf_file_wo_indels
# Note that deletions being missing data in the VCF file, the missing nucleotides will be replaced by reference alternative allele 
# when using bcftools consensus tool. Since no reads should be mapping at the deletions, this does not create bias in alignment
# apart from having reads being multireads in the reference but uniquely mapped in the pseudogenome (due to deletions).

###############################################################################
# Step 3: Generate a mask bed file which contains all positions with low quality calls. If the
# pseudogenome should have the same chromosome size than the reference, the deletions should be
# replaced by Ns and the insertions will be ignored (default mode).
# This step should be performed for each accession and the below-mentioned script can be simply 
# integrated in a while loop
filter_vcf2bed.py -s sample_name -i <subset_vcf_file.vcf.gz> > mask_sample.bed

## The default quality parameters are GQ >= 25 AND DP >= 3. If GQ >= 30 AND DP >= 5 are required:
filter_vcf2bed.py -s sample_name -i <subset_vcf_file.vcf.gz> -q 30 -c 5 > mask_sample.bed

# Step 3 bis: Generate a mask bed which does not contains deletions passing quality
# threshold. This enable to avoid masking these deletions and therefore integrate them in the pseudogenome
# Note that this option will generate pseudogenomes of unequal sizes
filter_vcf2bed.py --exclude-deletions -s sample_name -i <subset_vcf_file.vcf.gz> > mask_sample_with_deletions.bed

###############################################################################
# Step 4: merge bad quality call and deletions in one bed file to use as mask
## Merge mask_sample.bed (or mask_sample_with_deletions.bed) file
bedtools merge -i mask_sample.bed > mask_sample.merged.bed

## Rename and overwrite initial unmerged bed file
mv mask_sample.merged.bed mask_sample.bed
## Use 'rename -f 's/\.bed.merged.bed$/.bed/' *merged.bed' if several bed files need to be renamed

# Note that steps 3 and 4a are optional and that pseudogenomes can be made without masks. This
# implies that low quality call are discarded and the reference allele will be considered
# by default when no data are available in the VCF file. In this case, one needs to
# provide a VCF file filtered to keep only high quality SNPs.
# The resulting difference is that mapping efficiency will be lower with the mask (especially if many nucleotides have 
# low quality call) with a mask. The use of a mask makes however a more accurate pseudogenome 
# as it does not assume a reference allele for missing data.

###############################################################################
# Step 5: Generate pseudogenomes w/o deletions
# The mask will enable to replace by Ns all bases with a bad quality call and mask the deletions.
bcftools consensus <subset_vcf_file_wo_indels.vcf.gz> --sample sample_name --fasta-ref <reference_fasta.fa> --mask <mask_sample.bed> > pseudogenome_sample_name.fa

# Step 5 bis: Generate pseudogenomes with deletions
# In this case, the mask bed file was generated using the option -e (exclude deletions)
# Note that no insertions are present in the VCF file generated by Andrea, using SHORE and GATK pipeline. 
# Therefore, insertions are not considered in the filter_vcf2bed.py.
bcftools consensus <subset_vcf_file.vcf.gz> --sample sample_name --fasta-ref <reference_fasta.fa> --mask <mask_sample_with_deletions.bed> > pseudogenome_with_deletions_sample_name.fa

# Step 5 bis2
# If not mask is to be used. Unknown positions (filtered out in the VCF file) will be replaced
# by the reference alleles. Not defined deletions will also be replaced by reference sequence.
# This method may yield a better mapping efficiency, especially if sequencing data are poor compared
# to reference (low quality calling) but assumes spuriously nucleotide status without supporting sequencing data.
bcftools consensus <subset_vcf_file.vcf.gz> --sample sample_name --fasta-ref <reference_fasta.fa> > pseudogenome_with_deletions_sample_name.fa

###############################################################################
